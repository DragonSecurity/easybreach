on:
  push:
    tags:
      - 'v*.*.*'

name: compile

jobs:

  build:
    name: Build
    strategy:
      fail-fast: true
      matrix:
        container:
          - { os: 'ubuntu-latest', rust_target: 'aarch64-unknown-linux-musl' }
          - { os: 'ubuntu-latest', rust_target: 'x86_64-unknown-linux-musl' }
          - { os: 'macos-latest', rust_target: 'x86_64-apple-darwin' }
          - { os: 'macos-latest', rust_target: 'aarch64-apple-darwin' }
    runs-on: "${{ matrix.container.os }}"
    steps:
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: "${{ matrix.container.rust_target }}"
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: "--release --target ${{ matrix.container.rust_target }}"
      - name: Build and push
        run: |
          cp target/${{ matrix.container.rust_target }}/release/easybreach target/${{ matrix.container.rust_target }}/release/easybreach_${{ matrix.container.rust_target }}
          cp target/${{ matrix.container.rust_target }}/release/easybreach_haveibeenpwned_downloader target/${{ matrix.container.rust_target }}/release/easybreach_haveibeenpwned_downloader_${{ matrix.container.rust_target }}
      - name: Prepare output artifact (easybreach)
        uses: actions/upload-artifact@v3
        with:
          name: easybreach-${{ matrix.container.rust_target }}
          path: |
            target/${{ matrix.container.rust_target }}/release/easybreach_${{ matrix.container.rust_target }}
            target/${{ matrix.container.rust_target }}/release/easybreach_haveibeenpwned_downloader_${{ matrix.container.rust_target }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: ["build"]
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          path: binaries
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          files: |
            binaries/*/*

  docker_build:
    name: docker
    runs-on: ubuntu-latest
    needs: ["build"]
    strategy:
      fail-fast: true
      matrix:
        container:
          - { os: 'ubuntu-latest', arch: 'arm64', rust_target: 'aarch64-unknown-linux-musl' }
          - { os: 'ubuntu-latest', arch: 'amd64', rust_target: 'x86_64-unknown-linux-musl' }
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: download artifacts
        uses: actions/download-artifact@v3
        with:
          path: binaries
      - name: Build and push
        run: |
          cp binaries/easybreach-${{ matrix.container.rust_target }}/easybreach${{ matrix.container.rust_target }} binary_easybreach
          chmod +x binary_easybreach
          cp binaries/easybreach-${{ matrix.container.rust_target }}/easybreach_haveibeenpwned_downloader_${{ matrix.container.rust_target }} binary_easybreach_haveibeenpwned_downloader
          chmod +x binary_easybreach_haveibeenpwned_downloader
          docker buildx build -o type=docker --platform linux/${{ matrix.container.arch }} -t dragonsecurity/easybreach:${{github.ref_name}}_${{ matrix.container.arch }} .
          docker push dragonsecurity/easybreach:${{github.ref_name}}_${{ matrix.container.arch }}

  docker_manifest:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: ["docker_build"]
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push manifest
        run: |
          docker manifest create dragonsecurity/easybreach:${{github.ref_name}} dragonsecurity/easybreach:${{github.ref_name}}_amd64 dragonsecurity/easybreach:${{github.ref_name}}_arm64
          docker manifest push dragonsecurity/easybreach:${{github.ref_name}}