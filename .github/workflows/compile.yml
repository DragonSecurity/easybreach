on:
  push:
    tags:
      - 'v*.*.*'

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

name: compile

jobs:

  build:
    name: Build
    strategy:
      fail-fast: true
      matrix:
        container:
          - { os: 'ubuntu-latest', rust_target: 'aarch64-unknown-linux-musl' }
          - { os: 'ubuntu-latest', rust_target: 'x86_64-unknown-linux-musl' }
          - { os: 'macos-latest', rust_target: 'x86_64-apple-darwin' }
          - { os: 'macos-latest', rust_target: 'aarch64-apple-darwin' }
    runs-on: "${{ matrix.container.os }}"
    steps:
      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1
        with:
          toolchain: stable
          target: "${{ matrix.container.rust_target }}"
          override: true
      - uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505 # v1
        with:
          use-cross: true
          command: build
          args: "--release --target ${{ matrix.container.rust_target }}"
      - name: List target
        run: |
          ls -lah target/${{ matrix.container.rust_target }}/release
      - name: Build and push
        run: |
          cp target/${{ matrix.container.rust_target }}/release/easybreach target/${{ matrix.container.rust_target }}/release/easybreach_${{ matrix.container.rust_target }}
          cp target/${{ matrix.container.rust_target }}/release/downloader target/${{ matrix.container.rust_target }}/release/downloader_${{ matrix.container.rust_target }}
      - name: Prepare output artifact (easybreach)
        uses: actions/upload-artifact@ff15f0306b3f739f7b6fd43fb5d26cd321bd4de5 # v3
        with:
          name: easybreach-${{ matrix.container.rust_target }}
          path: |
            target/${{ matrix.container.rust_target }}/release/easybreach_${{ matrix.container.rust_target }}
            target/${{ matrix.container.rust_target }}/release/downloader_${{ matrix.container.rust_target }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: ["build"]
    steps:
      - name: download artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
        with:
          path: binaries
      - name: Release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # v1
        with:
          fail_on_unmatched_files: true
          files: |
            binaries/*/*

  docker_build:
    name: docker
    runs-on: ubuntu-latest
    needs: ["build"]
    strategy:
      fail-fast: true
      matrix:
        container:
          - { os: 'ubuntu-latest', arch: 'arm64', rust_target: 'aarch64-unknown-linux-musl' }
          - { os: 'ubuntu-latest', arch: 'amd64', rust_target: 'x86_64-unknown-linux-musl' }
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - uses: docker/setup-buildx-action@f211e3e9ded2d9377c8cadc4489a4e38014bc4c9 # v1
        id: buildx
        with:
          install: true
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: download artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
        with:
          path: binaries

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3.1.1
        with:
          cosign-release: 'v2.1.0'
      - name: Check install!
        run: cosign version

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  docker_manifest:
    name: Docker Image
    runs-on: ubuntu-latest
    needs: ["docker_build"]
    steps:
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3.1.1
        with:
          cosign-release: 'v2.1.0'
      - name: Check install!
        run: cosign version

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push manifest
        run: |
          docker manifest create dragonsecurity/easybreach:${{github.ref_name}} dragonsecurity/easybreach:${{github.ref_name}}_amd64 dragonsecurity/easybreach:${{github.ref_name}}_arm64
          docker manifest push dragonsecurity/easybreach:${{github.ref_name}}